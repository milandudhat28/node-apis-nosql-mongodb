Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT `id`, `firstName`, `middleName`, `lastName`, `dateOfBirth`, `gender`, `maritalStatus`, `spouseName`, `bloodGroup`, `employeeId`, `password`, `employeeImage`, `isActive`, `status`, `detailsUpdateProof`, `employeeEditProof`, `roleId`, `github`, `portfolioWebsite`, `createdDate`, `updatedDate`, `deletedDate` FROM `Employees` AS `Employees` WHERE (`Employees`.`deletedDate` IS NULL AND (`Employees`.`status` = 'employee' AND `Employees`.`employeeId` = 'CCCEMP0130')) LIMIT 1;
Executing (default): SELECT `EmployeeWorkDetails`.`id`, `EmployeeWorkDetails`.`joiningDate`, `EmployeeWorkDetails`.`reJoiningDate`, `EmployeeWorkDetails`.`productionDate`, `EmployeeWorkDetails`.`commitmentStartDate`, `EmployeeWorkDetails`.`teamLead`, `EmployeeWorkDetails`.`projectManager`, `EmployeeWorkDetails`.`bondDuration`, `EmployeeWorkDetails`.`noticePeriod`, `EmployeeWorkDetails`.`resignationDate`, `EmployeeWorkDetails`.`resignationAcceptanceDate`, `EmployeeWorkDetails`.`relievingDate`, `EmployeeWorkDetails`.`appraisalCycle`, `EmployeeWorkDetails`.`employeeType`, `EmployeeWorkDetails`.`technologyId`, `EmployeeWorkDetails`.`designationId`, `EmployeeWorkDetails`.`employeeId`, `designation`.`id` AS `designation.id`, `designation`.`title` AS `designation.title`, `technology`.`id` AS `technology.id`, `technology`.`title` AS `technology.title`, `teamLeadName`.`id` AS `teamLeadName.id`, `teamLeadName`.`firstName` AS `teamLeadName.firstName`, `teamLeadName`.`lastName` AS `teamLeadName.lastName`, `projectManagerName`.`id` AS `projectManagerName.id`, `projectManagerName`.`firstName` AS `projectManagerName.firstName`, `projectManagerName`.`lastName` AS `projectManagerName.lastName` FROM `EmployeeWorkDetails` AS `EmployeeWorkDetails` LEFT OUTER JOIN `DesignationMaster` AS `designation` ON `EmployeeWorkDetails`.`designationId` = `designation`.`id` AND (`designation`.`deletedDate` IS NULL) LEFT OUTER JOIN `TechnologyMaster` AS `technology` ON `EmployeeWorkDetails`.`technologyId` = `technology`.`id` AND (`technology`.`deletedDate` IS NULL) LEFT OUTER JOIN `Employees` AS `teamLeadName` ON `EmployeeWorkDetails`.`teamLead` = `teamLeadName`.`id` AND (`teamLeadName`.`deletedDate` IS NULL) LEFT OUTER JOIN `Employees` AS `projectManagerName` ON `EmployeeWorkDetails`.`projectManager` = `projectManagerName`.`id` AND (`projectManagerName`.`deletedDate` IS NULL) WHERE (`EmployeeWorkDetails`.`deletedDate` IS NULL AND `EmployeeWorkDetails`.`employeeId` = 130) LIMIT 1;
Executing (default): SELECT `EmployeeDepartments`.`id`, `EmployeeDepartments`.`departmentId`, `department`.`id` AS `department.id`, `department`.`title` AS `department.title` FROM `EmployeeDepartments` AS `EmployeeDepartments` LEFT OUTER JOIN `DepartmentMaster` AS `department` ON `EmployeeDepartments`.`departmentId` = `department`.`id` AND (`department`.`deletedDate` IS NULL) WHERE (`EmployeeDepartments`.`deletedDate` IS NULL AND `EmployeeDepartments`.`employeeId` = 130);
Executing (default): SELECT `EmployeeExperiences`.`id`, `EmployeeExperiences`.`designation`, `EmployeeExperiences`.`from`, `EmployeeExperiences`.`to`, `EmployeeExperiences`.`reasonForJobChange`, `EmployeeExperiences`.`employeeId`, `EmployeeExperiences`.`companyId`, `EmployeeExperiences`.`createdDate`, `EmployeeExperiences`.`updatedDate`, `EmployeeExperiences`.`deletedDate`, `technologies`.`id` AS `technologies.id`, `technologies`.`employeeExperienceId` AS `technologies.employeeExperienceId`, `technologies`.`technologyId` AS `technologies.technologyId`, `technologies`.`createdDate` AS `technologies.createdDate`, `technologies`.`updatedDate` AS `technologies.updatedDate`, `technologies`.`deletedDate` AS `technologies.deletedDate`, `technologies->technology`.`id` AS `technologies.technology.id`, `technologies->technology`.`title` AS `technologies.technology.title`, `technologies->technology`.`parentId` AS `technologies.technology.parentId`, `technologies->technology`.`isActive` AS `technologies.technology.isActive`, `technologies->technology`.`deletedDate` AS `technologies.technology.deletedDate`, `technologies->technology`.`createdDate` AS `technologies.technology.createdDate`, `technologies->technology`.`updatedDate` AS `technologies.technology.updatedDate`, `company`.`id` AS `company.id`, `company`.`name` AS `company.name`, `reasonForJobChangeName`.`id` AS `reasonForJobChangeName.id`, `reasonForJobChangeName`.`title` AS `reasonForJobChangeName.title` FROM `EmployeeExperiences` AS `EmployeeExperiences` LEFT OUTER JOIN `EmployeeExpTechnologies` AS `technologies` ON `EmployeeExperiences`.`id` = `technologies`.`employeeExperienceId` AND (`technologies`.`deletedDate` IS NULL) LEFT OUTER JOIN `TechnologyMaster` AS `technologies->technology` ON `technologies`.`technologyId` = `technologies->technology`.`id` AND (`technologies->technology`.`deletedDate` IS NULL) LEFT OUTER JOIN `CompanyMaster` AS `company` ON `EmployeeExperiences`.`companyId` = `company`.`id` AND (`company`.`deletedDate` IS NULL) LEFT OUTER JOIN `JobChangeReasonMaster` AS `reasonForJobChangeName` ON `EmployeeExperiences`.`reasonForJobChange` = `reasonForJobChangeName`.`id` AND (`reasonForJobChangeName`.`deletedDate` IS NULL) WHERE (`EmployeeExperiences`.`deletedDate` IS NULL AND `EmployeeExperiences`.`employeeId` = 130);
Executing (default): SELECT `id`, `requestDate`, `requestType`, `requestData`, `requestBy`, `requestStatus`, `employeeId`, `appVersion`, `appOS`, `statusUpdatedBy`, `statusUpdatedById`, `note`, `statusupdatedDate`, `isVisible`, `createdDate`, `updatedDate`, `deletedDate` FROM `EmployeeAppLogs` AS `EmployeeAppLogs` WHERE (`EmployeeAppLogs`.`deletedDate` IS NULL AND (`EmployeeAppLogs`.`requestType` = 'work-experience' AND `EmployeeAppLogs`.`requestStatus` = 'PENDING' AND `EmployeeAppLogs`.`employeeId` = 130)) ORDER BY `EmployeeAppLogs`.`id` DESC LIMIT 1;
Executing (default): SELECT `id`, `requestDate`, `requestType`, `requestData`, `requestBy`, `requestStatus`, `employeeId`, `appVersion`, `appOS`, `statusUpdatedBy`, `statusUpdatedById`, `note`, `statusupdatedDate`, `isVisible`, `createdDate`, `updatedDate`, `deletedDate` FROM `EmployeeAppLogs` AS `EmployeeAppLogs` WHERE (`EmployeeAppLogs`.`deletedDate` IS NULL AND (`EmployeeAppLogs`.`requestType` = 'work-experience' AND `EmployeeAppLogs`.`requestStatus` = 'REJECTED' AND `EmployeeAppLogs`.`isVisible` != 1 AND `EmployeeAppLogs`.`employeeId` = 130)) ORDER BY `EmployeeAppLogs`.`id` DESC LIMIT 1;
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Not overriding built-in method from model attribute: update
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = 'SequelizeMeta' AND TABLE_SCHEMA = 'HRMS'
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT `id`, `firstName`, `middleName`, `lastName`, `dateOfBirth`, `gender`, `maritalStatus`, `spouseName`, `bloodGroup`, `employeeId`, `password`, `employeeImage`, `isActive`, `status`, `detailsUpdateProof`, `employeeEditProof`, `roleId`, `github`, `portfolioWebsite`, `createdDate`, `updatedDate`, `deletedDate` FROM `Employees` AS `Employees` WHERE (`Employees`.`deletedDate` IS NULL AND (`Employees`.`status` = 'employee' AND `Employees`.`employeeId` = 'CCCEMP0130')) LIMIT 1;
Executing (default): SELECT `EmployeeWorkDetails`.`id`, `EmployeeWorkDetails`.`joiningDate`, `EmployeeWorkDetails`.`reJoiningDate`, `EmployeeWorkDetails`.`productionDate`, `EmployeeWorkDetails`.`commitmentStartDate`, `EmployeeWorkDetails`.`teamLead`, `EmployeeWorkDetails`.`projectManager`, `EmployeeWorkDetails`.`bondDuration`, `EmployeeWorkDetails`.`noticePeriod`, `EmployeeWorkDetails`.`resignationDate`, `EmployeeWorkDetails`.`resignationAcceptanceDate`, `EmployeeWorkDetails`.`relievingDate`, `EmployeeWorkDetails`.`appraisalCycle`, `EmployeeWorkDetails`.`employeeType`, `EmployeeWorkDetails`.`technologyId`, `EmployeeWorkDetails`.`designationId`, `EmployeeWorkDetails`.`employeeId`, `designation`.`id` AS `designation.id`, `designation`.`title` AS `designation.title`, `technology`.`id` AS `technology.id`, `technology`.`title` AS `technology.title`, `teamLeadName`.`id` AS `teamLeadName.id`, `teamLeadName`.`firstName` AS `teamLeadName.firstName`, `teamLeadName`.`lastName` AS `teamLeadName.lastName`, `projectManagerName`.`id` AS `projectManagerName.id`, `projectManagerName`.`firstName` AS `projectManagerName.firstName`, `projectManagerName`.`lastName` AS `projectManagerName.lastName` FROM `EmployeeWorkDetails` AS `EmployeeWorkDetails` LEFT OUTER JOIN `DesignationMaster` AS `designation` ON `EmployeeWorkDetails`.`designationId` = `designation`.`id` AND (`designation`.`deletedDate` IS NULL) LEFT OUTER JOIN `TechnologyMaster` AS `technology` ON `EmployeeWorkDetails`.`technologyId` = `technology`.`id` AND (`technology`.`deletedDate` IS NULL) LEFT OUTER JOIN `Employees` AS `teamLeadName` ON `EmployeeWorkDetails`.`teamLead` = `teamLeadName`.`id` AND (`teamLeadName`.`deletedDate` IS NULL) LEFT OUTER JOIN `Employees` AS `projectManagerName` ON `EmployeeWorkDetails`.`projectManager` = `projectManagerName`.`id` AND (`projectManagerName`.`deletedDate` IS NULL) WHERE (`EmployeeWorkDetails`.`deletedDate` IS NULL AND `EmployeeWorkDetails`.`employeeId` = 130) LIMIT 1;
Executing (default): SELECT `EmployeeDepartments`.`id`, `EmployeeDepartments`.`departmentId`, `department`.`id` AS `department.id`, `department`.`title` AS `department.title` FROM `EmployeeDepartments` AS `EmployeeDepartments` LEFT OUTER JOIN `DepartmentMaster` AS `department` ON `EmployeeDepartments`.`departmentId` = `department`.`id` AND (`department`.`deletedDate` IS NULL) WHERE (`EmployeeDepartments`.`deletedDate` IS NULL AND `EmployeeDepartments`.`employeeId` = 130);
Executing (default): SELECT `EmployeeExperiences`.`id`, `EmployeeExperiences`.`designation`, `EmployeeExperiences`.`from`, `EmployeeExperiences`.`to`, `EmployeeExperiences`.`reasonForJobChange`, `EmployeeExperiences`.`employeeId`, `EmployeeExperiences`.`companyId`, `EmployeeExperiences`.`createdDate`, `EmployeeExperiences`.`updatedDate`, `EmployeeExperiences`.`deletedDate`, `technologies`.`id` AS `technologies.id`, `technologies`.`employeeExperienceId` AS `technologies.employeeExperienceId`, `technologies`.`technologyId` AS `technologies.technologyId`, `technologies`.`createdDate` AS `technologies.createdDate`, `technologies`.`updatedDate` AS `technologies.updatedDate`, `technologies`.`deletedDate` AS `technologies.deletedDate`, `technologies->technology`.`id` AS `technologies.technology.id`, `technologies->technology`.`title` AS `technologies.technology.title`, `technologies->technology`.`parentId` AS `technologies.technology.parentId`, `technologies->technology`.`isActive` AS `technologies.technology.isActive`, `technologies->technology`.`deletedDate` AS `technologies.technology.deletedDate`, `technologies->technology`.`createdDate` AS `technologies.technology.createdDate`, `technologies->technology`.`updatedDate` AS `technologies.technology.updatedDate`, `company`.`id` AS `company.id`, `company`.`name` AS `company.name`, `reasonForJobChangeName`.`id` AS `reasonForJobChangeName.id`, `reasonForJobChangeName`.`title` AS `reasonForJobChangeName.title` FROM `EmployeeExperiences` AS `EmployeeExperiences` LEFT OUTER JOIN `EmployeeExpTechnologies` AS `technologies` ON `EmployeeExperiences`.`id` = `technologies`.`employeeExperienceId` AND (`technologies`.`deletedDate` IS NULL) LEFT OUTER JOIN `TechnologyMaster` AS `technologies->technology` ON `technologies`.`technologyId` = `technologies->technology`.`id` AND (`technologies->technology`.`deletedDate` IS NULL) LEFT OUTER JOIN `CompanyMaster` AS `company` ON `EmployeeExperiences`.`companyId` = `company`.`id` AND (`company`.`deletedDate` IS NULL) LEFT OUTER JOIN `JobChangeReasonMaster` AS `reasonForJobChangeName` ON `EmployeeExperiences`.`reasonForJobChange` = `reasonForJobChangeName`.`id` AND (`reasonForJobChangeName`.`deletedDate` IS NULL) WHERE (`EmployeeExperiences`.`deletedDate` IS NULL AND `EmployeeExperiences`.`employeeId` = 130);
Executing (default): SELECT `id`, `requestDate`, `requestType`, `requestData`, `requestBy`, `requestStatus`, `employeeId`, `appVersion`, `appOS`, `statusUpdatedBy`, `statusUpdatedById`, `note`, `statusupdatedDate`, `isVisible`, `createdDate`, `updatedDate`, `deletedDate` FROM `EmployeeAppLogs` AS `EmployeeAppLogs` WHERE (`EmployeeAppLogs`.`deletedDate` IS NULL AND (`EmployeeAppLogs`.`requestType` = 'work-experience' AND `EmployeeAppLogs`.`requestStatus` = 'PENDING' AND `EmployeeAppLogs`.`employeeId` = 130)) ORDER BY `EmployeeAppLogs`.`id` DESC LIMIT 1;
Executing (default): SELECT `id`, `requestDate`, `requestType`, `requestData`, `requestBy`, `requestStatus`, `employeeId`, `appVersion`, `appOS`, `statusUpdatedBy`, `statusUpdatedById`, `note`, `statusupdatedDate`, `isVisible`, `createdDate`, `updatedDate`, `deletedDate` FROM `EmployeeAppLogs` AS `EmployeeAppLogs` WHERE (`EmployeeAppLogs`.`deletedDate` IS NULL AND (`EmployeeAppLogs`.`requestType` = 'work-experience' AND `EmployeeAppLogs`.`requestStatus` = 'REJECTED' AND `EmployeeAppLogs`.`isVisible` != 1 AND `EmployeeAppLogs`.`employeeId` = 130)) ORDER BY `EmployeeAppLogs`.`id` DESC LIMIT 1;
