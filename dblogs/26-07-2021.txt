Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): CREATE TABLE IF NOT EXISTS `Candidates` (`id` INTEGER NOT NULL auto_increment , `firstName` VARCHAR(64), `middleName` VARCHAR(64), `lastName` VARCHAR(64), `dateOfBirth` DATETIME, `gender` VARCHAR(16), `spouseName` VARCHAR(64), `maritalStatus` VARCHAR(16), `candidateImage` TEXT, `referedBy` VARCHAR(64), `wishlist` TINYINT(1), `contactNumber` VARCHAR(16), `alternateContactNumber` VARCHAR(16), `email` VARCHAR(512), `skype` VARCHAR(512), `linkedIn` VARCHAR(512), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SHOW INDEX FROM `Candidates`
Executing (default): CREATE TABLE IF NOT EXISTS `Activities` (`id` INTEGER NOT NULL auto_increment , `approachDate` DATETIME, `approachBy` VARCHAR(64), `status` VARCHAR(64), `note` VARCHAR(512), `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Activities`
Executing (default): CREATE TABLE IF NOT EXISTS `activityStatusMasters` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `activityStatusMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `BloodGroupMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1) DEFAULT true, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `BloodGroupMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `CompanyMasters` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `website` VARCHAR(255), `noOfEmployees` INTEGER, `contactNumber` VARCHAR(255), `contactEmail` VARCHAR(255), `streetLine1` VARCHAR(255), `streetLine2` VARCHAR(255), `area` VARCHAR(255), `city` VARCHAR(255), `postalCode` VARCHAR(255), `state` VARCHAR(255), `country` VARCHAR(255), `appraisalCycle` VARCHAR(255), `noticePeriod` INTEGER, `bondDurationForExperienced` INTEGER, `bondDurationForFreshers` INTEGER, `weekends` VARCHAR(255), `notes` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `CompanyMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Courses` (`id` INTEGER NOT NULL auto_increment , `courseName` VARCHAR(256), `instituteName` VARCHAR(256), `certificateUrl` VARCHAR(512), `skills` TEXT, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Courses`
Executing (default): CREATE TABLE IF NOT EXISTS `CourseMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `CourseMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `DepartmentMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `DepartmentMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `DesignationMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) UNIQUE, `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `DesignationMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `EducationTypeMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1) DEFAULT true, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `EducationTypeMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Education` (`id` INTEGER NOT NULL auto_increment , `educationTypeId` INTEGER, `courseId` INTEGER, `instituteName` VARCHAR(512), `percentage` DECIMAL(10,2), `passingYear` INTEGER, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`educationTypeId`) REFERENCES `EducationTypeMasters` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`courseId`) REFERENCES `CourseMasters` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Education`
Executing (default): CREATE TABLE IF NOT EXISTS `Experiences` (`id` INTEGER NOT NULL auto_increment , `companyName` VARCHAR(256), `designation` VARCHAR(256), `technology` VARCHAR(256), `from` DATETIME, `to` DATETIME, `teamLead` VARCHAR(256), `projectManager` VARCHAR(256), `reasonForJobChange` VARCHAR(256), `totalExperience` INTEGER, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Experiences`
Executing (default): CREATE TABLE IF NOT EXISTS `JobChangeReasonMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `JobChangeReasonMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `POMasters` (`id` INTEGER NOT NULL auto_increment , `area` VARCHAR(255), `state` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `postalCode` VARCHAR(255), `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `POMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Salaries` (`id` INTEGER NOT NULL auto_increment , `lastIncrementDate` DATETIME, `currentCtc` INTEGER, `status` VARCHAR(64), `salaryBeforeIncrement` DECIMAL(10,2), `expectedCtc` DECIMAL(10,2), `addNoticePeriod` INTEGER, `reasonForProfessionalGap` VARCHAR(512), `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Salaries`
Executing (default): CREATE TABLE IF NOT EXISTS `SkillMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) NOT NULL, `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `SkillMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `TechnologyMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) NOT NULL, `parentId` INTEGER, `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `TechnologyMasters`
Executing (default): SELECT `Candidate`.`id`, `Candidate`.`firstName`, `Candidate`.`middleName`, `Candidate`.`lastName`, `Candidate`.`dateOfBirth`, `Candidate`.`gender`, `Candidate`.`spouseName`, `Candidate`.`maritalStatus`, `Candidate`.`candidateImage`, `Candidate`.`referedBy`, `Candidate`.`wishlist`, `Candidate`.`contactNumber`, `Candidate`.`alternateContactNumber`, `Candidate`.`email`, `Candidate`.`skype`, `Candidate`.`linkedIn`, `Candidate`.`isActive`, `Candidate`.`createdDate`, `Candidate`.`updatedDate`, `Candidate`.`deletedDate`, `education`.`id` AS `education.id`, `education`.`educationTypeId` AS `education.educationTypeId`, `education`.`courseId` AS `education.courseId`, `education`.`instituteName` AS `education.instituteName`, `education`.`percentage` AS `education.percentage`, `education`.`passingYear` AS `education.passingYear`, `education`.`candidateId` AS `education.candidateId`, `education`.`createdDate` AS `education.createdDate`, `education`.`updatedDate` AS `education.updatedDate`, `education`.`deletedDate` AS `education.deletedDate`, `course`.`id` AS `course.id`, `course`.`courseName` AS `course.courseName`, `course`.`instituteName` AS `course.instituteName`, `course`.`certificateUrl` AS `course.certificateUrl`, `course`.`skills` AS `course.skills`, `course`.`candidateId` AS `course.candidateId`, `course`.`createdDate` AS `course.createdDate`, `course`.`updatedDate` AS `course.updatedDate`, `course`.`deletedDate` AS `course.deletedDate`, `experience`.`id` AS `experience.id`, `experience`.`companyName` AS `experience.companyName`, `experience`.`designation` AS `experience.designation`, `experience`.`technology` AS `experience.technology`, `experience`.`from` AS `experience.from`, `experience`.`to` AS `experience.to`, `experience`.`teamLead` AS `experience.teamLead`, `experience`.`projectManager` AS `experience.projectManager`, `experience`.`reasonForJobChange` AS `experience.reasonForJobChange`, `experience`.`totalExperience` AS `experience.totalExperience`, `experience`.`candidateId` AS `experience.candidateId`, `experience`.`createdDate` AS `experience.createdDate`, `experience`.`updatedDate` AS `experience.updatedDate`, `experience`.`deletedDate` AS `experience.deletedDate`, `salary`.`id` AS `salary.id`, `salary`.`lastIncrementDate` AS `salary.lastIncrementDate`, `salary`.`currentCtc` AS `salary.currentCtc`, `salary`.`status` AS `salary.status`, `salary`.`salaryBeforeIncrement` AS `salary.salaryBeforeIncrement`, `salary`.`expectedCtc` AS `salary.expectedCtc`, `salary`.`addNoticePeriod` AS `salary.addNoticePeriod`, `salary`.`reasonForProfessionalGap` AS `salary.reasonForProfessionalGap`, `salary`.`candidateId` AS `salary.candidateId`, `salary`.`createdDate` AS `salary.createdDate`, `salary`.`updatedDate` AS `salary.updatedDate`, `salary`.`deletedDate` AS `salary.deletedDate`, `activity`.`id` AS `activity.id`, `activity`.`approachDate` AS `activity.approachDate`, `activity`.`approachBy` AS `activity.approachBy`, `activity`.`status` AS `activity.status`, `activity`.`note` AS `activity.note`, `activity`.`candidateId` AS `activity.candidateId`, `activity`.`createdDate` AS `activity.createdDate`, `activity`.`updatedDate` AS `activity.updatedDate`, `activity`.`deletedDate` AS `activity.deletedDate` FROM `Candidates` AS `Candidate` LEFT OUTER JOIN `Education` AS `education` ON `Candidate`.`id` = `education`.`candidateId` AND (`education`.`deletedDate` IS NULL) LEFT OUTER JOIN `Courses` AS `course` ON `Candidate`.`id` = `course`.`candidateId` AND (`course`.`deletedDate` IS NULL) LEFT OUTER JOIN `Experiences` AS `experience` ON `Candidate`.`id` = `experience`.`candidateId` AND (`experience`.`deletedDate` IS NULL) LEFT OUTER JOIN `Salaries` AS `salary` ON `Candidate`.`id` = `salary`.`candidateId` AND (`salary`.`deletedDate` IS NULL) LEFT OUTER JOIN `Activities` AS `activity` ON `Candidate`.`id` = `activity`.`candidateId` AND (`activity`.`deletedDate` IS NULL) WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '95');
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Courses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Experiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Salaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Activities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): CREATE TABLE IF NOT EXISTS `Candidates` (`id` INTEGER NOT NULL auto_increment , `firstName` VARCHAR(64), `middleName` VARCHAR(64), `lastName` VARCHAR(64), `dateOfBirth` DATETIME, `gender` VARCHAR(16), `spouseName` VARCHAR(64), `maritalStatus` VARCHAR(16), `candidateImage` TEXT, `referedBy` VARCHAR(64), `wishlist` TINYINT(1), `contactNumber` VARCHAR(16), `alternateContactNumber` VARCHAR(16), `email` VARCHAR(512), `skype` VARCHAR(512), `linkedIn` VARCHAR(512), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SHOW INDEX FROM `Candidates`
Executing (default): CREATE TABLE IF NOT EXISTS `Activities` (`id` INTEGER NOT NULL auto_increment , `approachDate` DATETIME, `approachBy` VARCHAR(64), `status` VARCHAR(64), `note` VARCHAR(512), `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Activities`
Executing (default): CREATE TABLE IF NOT EXISTS `activityStatusMasters` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `activityStatusMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `BloodGroupMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1) DEFAULT true, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `BloodGroupMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `CompanyMasters` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `website` VARCHAR(255), `noOfEmployees` INTEGER, `contactNumber` VARCHAR(255), `contactEmail` VARCHAR(255), `streetLine1` VARCHAR(255), `streetLine2` VARCHAR(255), `area` VARCHAR(255), `city` VARCHAR(255), `postalCode` VARCHAR(255), `state` VARCHAR(255), `country` VARCHAR(255), `appraisalCycle` VARCHAR(255), `noticePeriod` INTEGER, `bondDurationForExperienced` INTEGER, `bondDurationForFreshers` INTEGER, `weekends` VARCHAR(255), `notes` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `CompanyMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Courses` (`id` INTEGER NOT NULL auto_increment , `courseName` VARCHAR(256), `instituteName` VARCHAR(256), `certificateUrl` VARCHAR(512), `skills` TEXT, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Courses`
Executing (default): CREATE TABLE IF NOT EXISTS `CourseMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `CourseMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `DepartmentMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `DepartmentMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `DesignationMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) UNIQUE, `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `DesignationMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `EducationTypeMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1) DEFAULT true, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `EducationTypeMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Education` (`id` INTEGER NOT NULL auto_increment , `educationTypeId` INTEGER, `courseId` INTEGER, `instituteName` VARCHAR(512), `percentage` DECIMAL(10,2), `passingYear` INTEGER, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`educationTypeId`) REFERENCES `EducationTypeMasters` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`courseId`) REFERENCES `CourseMasters` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Education`
Executing (default): CREATE TABLE IF NOT EXISTS `Experiences` (`id` INTEGER NOT NULL auto_increment , `companyName` VARCHAR(256), `designation` VARCHAR(256), `technology` VARCHAR(256), `from` DATETIME, `to` DATETIME, `teamLead` VARCHAR(256), `projectManager` VARCHAR(256), `reasonForJobChange` VARCHAR(256), `totalExperience` INTEGER, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Experiences`
Executing (default): CREATE TABLE IF NOT EXISTS `JobChangeReasonMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `JobChangeReasonMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `POMasters` (`id` INTEGER NOT NULL auto_increment , `area` VARCHAR(255), `state` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `postalCode` VARCHAR(255), `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `POMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Salaries` (`id` INTEGER NOT NULL auto_increment , `lastIncrementDate` DATETIME, `currentCtc` INTEGER, `status` VARCHAR(64), `salaryBeforeIncrement` DECIMAL(10,2), `expectedCtc` DECIMAL(10,2), `addNoticePeriod` INTEGER, `reasonForProfessionalGap` VARCHAR(512), `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Salaries`
Executing (default): CREATE TABLE IF NOT EXISTS `SkillMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) NOT NULL, `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `SkillMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `TechnologyMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) NOT NULL, `parentId` INTEGER, `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `TechnologyMasters`
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Courses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Experiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Salaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Activities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Courses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Experiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Salaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Activities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): CREATE TABLE IF NOT EXISTS `Candidates` (`id` INTEGER NOT NULL auto_increment , `firstName` VARCHAR(64), `middleName` VARCHAR(64), `lastName` VARCHAR(64), `dateOfBirth` DATETIME, `gender` VARCHAR(16), `spouseName` VARCHAR(64), `maritalStatus` VARCHAR(16), `candidateImage` TEXT, `referedBy` VARCHAR(64), `wishlist` TINYINT(1), `contactNumber` VARCHAR(16), `alternateContactNumber` VARCHAR(16), `email` VARCHAR(512), `skype` VARCHAR(512), `linkedIn` VARCHAR(512), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SHOW INDEX FROM `Candidates`
Executing (default): CREATE TABLE IF NOT EXISTS `Activities` (`id` INTEGER NOT NULL auto_increment , `approachDate` DATETIME, `approachBy` VARCHAR(64), `status` VARCHAR(64), `note` VARCHAR(512), `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Activities`
Executing (default): CREATE TABLE IF NOT EXISTS `activityStatusMasters` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `activityStatusMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `BloodGroupMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1) DEFAULT true, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `BloodGroupMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `CompanyMasters` (`id` INTEGER NOT NULL auto_increment , `name` VARCHAR(255), `website` VARCHAR(255), `noOfEmployees` INTEGER, `contactNumber` VARCHAR(255), `contactEmail` VARCHAR(255), `streetLine1` VARCHAR(255), `streetLine2` VARCHAR(255), `area` VARCHAR(255), `city` VARCHAR(255), `postalCode` VARCHAR(255), `state` VARCHAR(255), `country` VARCHAR(255), `appraisalCycle` VARCHAR(255), `noticePeriod` INTEGER, `bondDurationForExperienced` INTEGER, `bondDurationForFreshers` INTEGER, `weekends` VARCHAR(255), `notes` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `CompanyMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Courses` (`id` INTEGER NOT NULL auto_increment , `courseName` VARCHAR(256), `instituteName` VARCHAR(256), `certificateUrl` VARCHAR(512), `skills` TEXT, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Courses`
Executing (default): CREATE TABLE IF NOT EXISTS `CourseMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `CourseMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `DepartmentMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `DepartmentMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `DesignationMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) UNIQUE, `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `DesignationMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `EducationTypeMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1) DEFAULT true, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `EducationTypeMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Education` (`id` INTEGER NOT NULL auto_increment , `educationTypeId` INTEGER, `courseId` INTEGER, `instituteName` VARCHAR(512), `percentage` DECIMAL(10,2), `passingYear` INTEGER, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`educationTypeId`) REFERENCES `EducationTypeMasters` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`courseId`) REFERENCES `CourseMasters` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Education`
Executing (default): CREATE TABLE IF NOT EXISTS `Experiences` (`id` INTEGER NOT NULL auto_increment , `companyName` VARCHAR(256), `designation` VARCHAR(256), `technology` VARCHAR(256), `from` DATETIME, `to` DATETIME, `teamLead` VARCHAR(256), `projectManager` VARCHAR(256), `reasonForJobChange` VARCHAR(256), `totalExperience` INTEGER, `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Experiences`
Executing (default): CREATE TABLE IF NOT EXISTS `JobChangeReasonMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255), `isActive` TINYINT(1), `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `JobChangeReasonMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `POMasters` (`id` INTEGER NOT NULL auto_increment , `area` VARCHAR(255), `state` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `postalCode` VARCHAR(255), `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `POMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `Salaries` (`id` INTEGER NOT NULL auto_increment , `lastIncrementDate` DATETIME, `currentCtc` INTEGER, `status` VARCHAR(64), `salaryBeforeIncrement` DECIMAL(10,2), `expectedCtc` DECIMAL(10,2), `addNoticePeriod` INTEGER, `reasonForProfessionalGap` VARCHAR(512), `candidateId` INTEGER, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, `deletedDate` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`candidateId`) REFERENCES `Candidates` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `Salaries`
Executing (default): CREATE TABLE IF NOT EXISTS `SkillMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) NOT NULL, `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `SkillMasters`
Executing (default): CREATE TABLE IF NOT EXISTS `TechnologyMasters` (`id` INTEGER NOT NULL auto_increment , `title` VARCHAR(255) NOT NULL, `parentId` INTEGER, `isActive` TINYINT(1), `deletedDate` DATETIME, `createdDate` DATETIME NOT NULL, `updatedDate` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `TechnologyMasters`
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Courses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Experiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Salaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Activities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Education` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Courses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Experiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Salaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Activities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducations` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducations` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateSalaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `Activities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateSalaries` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateSalaryDetails` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): SELECT `Candidate`.`id`, `Candidate`.`firstName`, `Candidate`.`middleName`, `Candidate`.`lastName`, `Candidate`.`dateOfBirth`, `Candidate`.`gender`, `Candidate`.`spouseName`, `Candidate`.`maritalStatus`, `Candidate`.`candidateImage`, `Candidate`.`referedBy`, `Candidate`.`wishlist`, `Candidate`.`contactNumber`, `Candidate`.`alternateContactNumber`, `Candidate`.`email`, `Candidate`.`skype`, `Candidate`.`linkedIn`, `Candidate`.`isActive`, `Candidate`.`createdDate`, `Candidate`.`updatedDate`, `Candidate`.`deletedDate`, `education`.`id` AS `education.id`, `education`.`educationTypeId` AS `education.educationTypeId`, `education`.`courseId` AS `education.courseId`, `education`.`instituteName` AS `education.instituteName`, `education`.`percentage` AS `education.percentage`, `education`.`passingYear` AS `education.passingYear`, `education`.`candidateId` AS `education.candidateId`, `education`.`createdDate` AS `education.createdDate`, `education`.`updatedDate` AS `education.updatedDate`, `education`.`deletedDate` AS `education.deletedDate`, `course`.`id` AS `course.id`, `course`.`courseName` AS `course.courseName`, `course`.`instituteName` AS `course.instituteName`, `course`.`certificateUrl` AS `course.certificateUrl`, `course`.`skills` AS `course.skills`, `course`.`candidateId` AS `course.candidateId`, `course`.`createdDate` AS `course.createdDate`, `course`.`updatedDate` AS `course.updatedDate`, `course`.`deletedDate` AS `course.deletedDate`, `experience`.`id` AS `experience.id`, `experience`.`companyName` AS `experience.companyName`, `experience`.`designation` AS `experience.designation`, `experience`.`technology` AS `experience.technology`, `experience`.`from` AS `experience.from`, `experience`.`to` AS `experience.to`, `experience`.`teamLead` AS `experience.teamLead`, `experience`.`projectManager` AS `experience.projectManager`, `experience`.`reasonForJobChange` AS `experience.reasonForJobChange`, `experience`.`totalExperience` AS `experience.totalExperience`, `experience`.`candidateId` AS `experience.candidateId`, `experience`.`createdDate` AS `experience.createdDate`, `experience`.`updatedDate` AS `experience.updatedDate`, `experience`.`deletedDate` AS `experience.deletedDate`, `salary`.`id` AS `salary.id`, `salary`.`lastIncrementDate` AS `salary.lastIncrementDate`, `salary`.`currentCtc` AS `salary.currentCtc`, `salary`.`status` AS `salary.status`, `salary`.`salaryBeforeIncrement` AS `salary.salaryBeforeIncrement`, `salary`.`expectedCtc` AS `salary.expectedCtc`, `salary`.`addNoticePeriod` AS `salary.addNoticePeriod`, `salary`.`reasonForProfessionalGap` AS `salary.reasonForProfessionalGap`, `salary`.`candidateId` AS `salary.candidateId`, `salary`.`createdDate` AS `salary.createdDate`, `salary`.`updatedDate` AS `salary.updatedDate`, `salary`.`deletedDate` AS `salary.deletedDate`, `activity`.`id` AS `activity.id`, `activity`.`approachDate` AS `activity.approachDate`, `activity`.`approachBy` AS `activity.approachBy`, `activity`.`status` AS `activity.status`, `activity`.`note` AS `activity.note`, `activity`.`candidateId` AS `activity.candidateId`, `activity`.`createdDate` AS `activity.createdDate`, `activity`.`updatedDate` AS `activity.updatedDate`, `activity`.`deletedDate` AS `activity.deletedDate` FROM `Candidates` AS `Candidate` LEFT OUTER JOIN `CandidateEducation` AS `education` ON `Candidate`.`id` = `education`.`candidateId` AND (`education`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateCourses` AS `course` ON `Candidate`.`id` = `course`.`candidateId` AND (`course`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateExperiences` AS `experience` ON `Candidate`.`id` = `experience`.`candidateId` AND (`experience`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateSalaryDetails` AS `salary` ON `Candidate`.`id` = `salary`.`candidateId` AND (`salary`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateActivities` AS `activity` ON `Candidate`.`id` = `activity`.`candidateId` AND (`activity`.`deletedDate` IS NULL) WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '103');
Executing (default): SELECT `Candidate`.`id`, `Candidate`.`firstName`, `Candidate`.`middleName`, `Candidate`.`lastName`, `Candidate`.`dateOfBirth`, `Candidate`.`gender`, `Candidate`.`spouseName`, `Candidate`.`maritalStatus`, `Candidate`.`candidateImage`, `Candidate`.`referedBy`, `Candidate`.`wishlist`, `Candidate`.`contactNumber`, `Candidate`.`alternateContactNumber`, `Candidate`.`email`, `Candidate`.`skype`, `Candidate`.`linkedIn`, `Candidate`.`isActive`, `Candidate`.`createdDate`, `Candidate`.`updatedDate`, `Candidate`.`deletedDate`, `education`.`id` AS `education.id`, `education`.`educationTypeId` AS `education.educationTypeId`, `education`.`courseId` AS `education.courseId`, `education`.`instituteName` AS `education.instituteName`, `education`.`percentage` AS `education.percentage`, `education`.`passingYear` AS `education.passingYear`, `education`.`candidateId` AS `education.candidateId`, `education`.`createdDate` AS `education.createdDate`, `education`.`updatedDate` AS `education.updatedDate`, `education`.`deletedDate` AS `education.deletedDate`, `course`.`id` AS `course.id`, `course`.`courseName` AS `course.courseName`, `course`.`instituteName` AS `course.instituteName`, `course`.`certificateUrl` AS `course.certificateUrl`, `course`.`skills` AS `course.skills`, `course`.`candidateId` AS `course.candidateId`, `course`.`createdDate` AS `course.createdDate`, `course`.`updatedDate` AS `course.updatedDate`, `course`.`deletedDate` AS `course.deletedDate`, `experience`.`id` AS `experience.id`, `experience`.`companyName` AS `experience.companyName`, `experience`.`designation` AS `experience.designation`, `experience`.`technology` AS `experience.technology`, `experience`.`from` AS `experience.from`, `experience`.`to` AS `experience.to`, `experience`.`teamLead` AS `experience.teamLead`, `experience`.`projectManager` AS `experience.projectManager`, `experience`.`reasonForJobChange` AS `experience.reasonForJobChange`, `experience`.`totalExperience` AS `experience.totalExperience`, `experience`.`candidateId` AS `experience.candidateId`, `experience`.`createdDate` AS `experience.createdDate`, `experience`.`updatedDate` AS `experience.updatedDate`, `experience`.`deletedDate` AS `experience.deletedDate`, `salary`.`id` AS `salary.id`, `salary`.`lastIncrementDate` AS `salary.lastIncrementDate`, `salary`.`currentCtc` AS `salary.currentCtc`, `salary`.`status` AS `salary.status`, `salary`.`salaryBeforeIncrement` AS `salary.salaryBeforeIncrement`, `salary`.`expectedCtc` AS `salary.expectedCtc`, `salary`.`addNoticePeriod` AS `salary.addNoticePeriod`, `salary`.`reasonForProfessionalGap` AS `salary.reasonForProfessionalGap`, `salary`.`candidateId` AS `salary.candidateId`, `salary`.`createdDate` AS `salary.createdDate`, `salary`.`updatedDate` AS `salary.updatedDate`, `salary`.`deletedDate` AS `salary.deletedDate`, `activity`.`id` AS `activity.id`, `activity`.`approachDate` AS `activity.approachDate`, `activity`.`approachBy` AS `activity.approachBy`, `activity`.`status` AS `activity.status`, `activity`.`note` AS `activity.note`, `activity`.`candidateId` AS `activity.candidateId`, `activity`.`createdDate` AS `activity.createdDate`, `activity`.`updatedDate` AS `activity.updatedDate`, `activity`.`deletedDate` AS `activity.deletedDate` FROM `Candidates` AS `Candidate` LEFT OUTER JOIN `CandidateEducation` AS `education` ON `Candidate`.`id` = `education`.`candidateId` AND (`education`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateCourses` AS `course` ON `Candidate`.`id` = `course`.`candidateId` AND (`course`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateExperiences` AS `experience` ON `Candidate`.`id` = `experience`.`candidateId` AND (`experience`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateSalaryDetails` AS `salary` ON `Candidate`.`id` = `salary`.`candidateId` AND (`salary`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateActivities` AS `activity` ON `Candidate`.`id` = `activity`.`candidateId` AND (`activity`.`deletedDate` IS NULL) WHERE (`Candidate`.`deletedDate` IS NULL);
Executing (default): SELECT `Candidate`.`id`, `Candidate`.`firstName`, `Candidate`.`middleName`, `Candidate`.`lastName`, `Candidate`.`dateOfBirth`, `Candidate`.`gender`, `Candidate`.`spouseName`, `Candidate`.`maritalStatus`, `Candidate`.`candidateImage`, `Candidate`.`referedBy`, `Candidate`.`wishlist`, `Candidate`.`contactNumber`, `Candidate`.`alternateContactNumber`, `Candidate`.`email`, `Candidate`.`skype`, `Candidate`.`linkedIn`, `Candidate`.`isActive`, `Candidate`.`createdDate`, `Candidate`.`updatedDate`, `Candidate`.`deletedDate`, `education`.`id` AS `education.id`, `education`.`educationTypeId` AS `education.educationTypeId`, `education`.`courseId` AS `education.courseId`, `education`.`instituteName` AS `education.instituteName`, `education`.`percentage` AS `education.percentage`, `education`.`passingYear` AS `education.passingYear`, `education`.`candidateId` AS `education.candidateId`, `education`.`createdDate` AS `education.createdDate`, `education`.`updatedDate` AS `education.updatedDate`, `education`.`deletedDate` AS `education.deletedDate`, `course`.`id` AS `course.id`, `course`.`courseName` AS `course.courseName`, `course`.`instituteName` AS `course.instituteName`, `course`.`certificateUrl` AS `course.certificateUrl`, `course`.`skills` AS `course.skills`, `course`.`candidateId` AS `course.candidateId`, `course`.`createdDate` AS `course.createdDate`, `course`.`updatedDate` AS `course.updatedDate`, `course`.`deletedDate` AS `course.deletedDate`, `experience`.`id` AS `experience.id`, `experience`.`companyName` AS `experience.companyName`, `experience`.`designation` AS `experience.designation`, `experience`.`technology` AS `experience.technology`, `experience`.`from` AS `experience.from`, `experience`.`to` AS `experience.to`, `experience`.`teamLead` AS `experience.teamLead`, `experience`.`projectManager` AS `experience.projectManager`, `experience`.`reasonForJobChange` AS `experience.reasonForJobChange`, `experience`.`totalExperience` AS `experience.totalExperience`, `experience`.`candidateId` AS `experience.candidateId`, `experience`.`createdDate` AS `experience.createdDate`, `experience`.`updatedDate` AS `experience.updatedDate`, `experience`.`deletedDate` AS `experience.deletedDate`, `salary`.`id` AS `salary.id`, `salary`.`lastIncrementDate` AS `salary.lastIncrementDate`, `salary`.`currentCtc` AS `salary.currentCtc`, `salary`.`status` AS `salary.status`, `salary`.`salaryBeforeIncrement` AS `salary.salaryBeforeIncrement`, `salary`.`expectedCtc` AS `salary.expectedCtc`, `salary`.`addNoticePeriod` AS `salary.addNoticePeriod`, `salary`.`reasonForProfessionalGap` AS `salary.reasonForProfessionalGap`, `salary`.`candidateId` AS `salary.candidateId`, `salary`.`createdDate` AS `salary.createdDate`, `salary`.`updatedDate` AS `salary.updatedDate`, `salary`.`deletedDate` AS `salary.deletedDate`, `activity`.`id` AS `activity.id`, `activity`.`approachDate` AS `activity.approachDate`, `activity`.`approachBy` AS `activity.approachBy`, `activity`.`status` AS `activity.status`, `activity`.`note` AS `activity.note`, `activity`.`candidateId` AS `activity.candidateId`, `activity`.`createdDate` AS `activity.createdDate`, `activity`.`updatedDate` AS `activity.updatedDate`, `activity`.`deletedDate` AS `activity.deletedDate` FROM `Candidates` AS `Candidate` LEFT OUTER JOIN `CandidateEducation` AS `education` ON `Candidate`.`id` = `education`.`candidateId` AND (`education`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateCourses` AS `course` ON `Candidate`.`id` = `course`.`candidateId` AND (`course`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateExperiences` AS `experience` ON `Candidate`.`id` = `experience`.`candidateId` AND (`experience`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateSalaryDetails` AS `salary` ON `Candidate`.`id` = `salary`.`candidateId` AND (`salary`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateActivities` AS `activity` ON `Candidate`.`id` = `activity`.`candidateId` AND (`activity`.`deletedDate` IS NULL) WHERE (`Candidate`.`deletedDate` IS NULL);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SELECT 1+1 AS result
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateSalaryDetails` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (DEFAULT,?,?,?,?,?,?,?);
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): START TRANSACTION;
Executing (default): SELECT count(*) AS `count` FROM `Candidates` AS `Candidate` WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '104');
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): UPDATE `CandidateEducation` SET `deletedDate`=? WHERE `deletedDate` IS NULL AND `candidateId` = ?
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): UPDATE `CandidateCourses` SET `deletedDate`=? WHERE `deletedDate` IS NULL AND `candidateId` = ?
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): UPDATE `CandidateExperiences` SET `deletedDate`=? WHERE `deletedDate` IS NULL AND `candidateId` = ?
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): UPDATE `CandidateSalaryDetails` SET `deletedDate`=? WHERE `deletedDate` IS NULL AND `candidateId` = ?
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): UPDATE `CandidateActivities` SET `deletedDate`=? WHERE `deletedDate` IS NULL AND `candidateId` = ?
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): UPDATE `Candidates` SET `deletedDate`=? WHERE `deletedDate` IS NULL AND `id` = ?
Executing (4c327434-8f8e-4cd7-ad16-9da445d45d57): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT `Candidate`.`id`, `Candidate`.`firstName`, `Candidate`.`middleName`, `Candidate`.`lastName`, `Candidate`.`dateOfBirth`, `Candidate`.`gender`, `Candidate`.`spouseName`, `Candidate`.`maritalStatus`, `Candidate`.`candidateImage`, `Candidate`.`referedBy`, `Candidate`.`wishlist`, `Candidate`.`contactNumber`, `Candidate`.`alternateContactNumber`, `Candidate`.`email`, `Candidate`.`skype`, `Candidate`.`linkedIn`, `Candidate`.`isActive`, `Candidate`.`createdDate`, `Candidate`.`updatedDate`, `Candidate`.`deletedDate`, `education`.`id` AS `education.id`, `education`.`educationTypeId` AS `education.educationTypeId`, `education`.`courseId` AS `education.courseId`, `education`.`instituteName` AS `education.instituteName`, `education`.`percentage` AS `education.percentage`, `education`.`passingYear` AS `education.passingYear`, `education`.`candidateId` AS `education.candidateId`, `education`.`createdDate` AS `education.createdDate`, `education`.`updatedDate` AS `education.updatedDate`, `education`.`deletedDate` AS `education.deletedDate`, `course`.`id` AS `course.id`, `course`.`courseName` AS `course.courseName`, `course`.`instituteName` AS `course.instituteName`, `course`.`certificateUrl` AS `course.certificateUrl`, `course`.`skills` AS `course.skills`, `course`.`candidateId` AS `course.candidateId`, `course`.`createdDate` AS `course.createdDate`, `course`.`updatedDate` AS `course.updatedDate`, `course`.`deletedDate` AS `course.deletedDate`, `experience`.`id` AS `experience.id`, `experience`.`companyName` AS `experience.companyName`, `experience`.`designation` AS `experience.designation`, `experience`.`technology` AS `experience.technology`, `experience`.`from` AS `experience.from`, `experience`.`to` AS `experience.to`, `experience`.`teamLead` AS `experience.teamLead`, `experience`.`projectManager` AS `experience.projectManager`, `experience`.`reasonForJobChange` AS `experience.reasonForJobChange`, `experience`.`totalExperience` AS `experience.totalExperience`, `experience`.`candidateId` AS `experience.candidateId`, `experience`.`createdDate` AS `experience.createdDate`, `experience`.`updatedDate` AS `experience.updatedDate`, `experience`.`deletedDate` AS `experience.deletedDate`, `salary`.`id` AS `salary.id`, `salary`.`lastIncrementDate` AS `salary.lastIncrementDate`, `salary`.`currentCtc` AS `salary.currentCtc`, `salary`.`status` AS `salary.status`, `salary`.`salaryBeforeIncrement` AS `salary.salaryBeforeIncrement`, `salary`.`expectedCtc` AS `salary.expectedCtc`, `salary`.`addNoticePeriod` AS `salary.addNoticePeriod`, `salary`.`reasonForProfessionalGap` AS `salary.reasonForProfessionalGap`, `salary`.`candidateId` AS `salary.candidateId`, `salary`.`createdDate` AS `salary.createdDate`, `salary`.`updatedDate` AS `salary.updatedDate`, `salary`.`deletedDate` AS `salary.deletedDate`, `activity`.`id` AS `activity.id`, `activity`.`approachDate` AS `activity.approachDate`, `activity`.`approachBy` AS `activity.approachBy`, `activity`.`status` AS `activity.status`, `activity`.`note` AS `activity.note`, `activity`.`candidateId` AS `activity.candidateId`, `activity`.`createdDate` AS `activity.createdDate`, `activity`.`updatedDate` AS `activity.updatedDate`, `activity`.`deletedDate` AS `activity.deletedDate` FROM `Candidates` AS `Candidate` LEFT OUTER JOIN `CandidateEducation` AS `education` ON `Candidate`.`id` = `education`.`candidateId` AND (`education`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateCourses` AS `course` ON `Candidate`.`id` = `course`.`candidateId` AND (`course`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateExperiences` AS `experience` ON `Candidate`.`id` = `experience`.`candidateId` AND (`experience`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateSalaryDetails` AS `salary` ON `Candidate`.`id` = `salary`.`candidateId` AND (`salary`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateActivities` AS `activity` ON `Candidate`.`id` = `activity`.`candidateId` AND (`activity`.`deletedDate` IS NULL) WHERE (`Candidate`.`deletedDate` IS NULL);
Executing (default): SELECT `Candidate`.`id`, `Candidate`.`firstName`, `Candidate`.`middleName`, `Candidate`.`lastName`, `Candidate`.`dateOfBirth`, `Candidate`.`gender`, `Candidate`.`spouseName`, `Candidate`.`maritalStatus`, `Candidate`.`candidateImage`, `Candidate`.`referedBy`, `Candidate`.`wishlist`, `Candidate`.`contactNumber`, `Candidate`.`alternateContactNumber`, `Candidate`.`email`, `Candidate`.`skype`, `Candidate`.`linkedIn`, `Candidate`.`isActive`, `Candidate`.`createdDate`, `Candidate`.`updatedDate`, `Candidate`.`deletedDate`, `education`.`id` AS `education.id`, `education`.`educationTypeId` AS `education.educationTypeId`, `education`.`courseId` AS `education.courseId`, `education`.`instituteName` AS `education.instituteName`, `education`.`percentage` AS `education.percentage`, `education`.`passingYear` AS `education.passingYear`, `education`.`candidateId` AS `education.candidateId`, `education`.`createdDate` AS `education.createdDate`, `education`.`updatedDate` AS `education.updatedDate`, `education`.`deletedDate` AS `education.deletedDate`, `course`.`id` AS `course.id`, `course`.`courseName` AS `course.courseName`, `course`.`instituteName` AS `course.instituteName`, `course`.`certificateUrl` AS `course.certificateUrl`, `course`.`skills` AS `course.skills`, `course`.`candidateId` AS `course.candidateId`, `course`.`createdDate` AS `course.createdDate`, `course`.`updatedDate` AS `course.updatedDate`, `course`.`deletedDate` AS `course.deletedDate`, `experience`.`id` AS `experience.id`, `experience`.`companyName` AS `experience.companyName`, `experience`.`designation` AS `experience.designation`, `experience`.`technology` AS `experience.technology`, `experience`.`from` AS `experience.from`, `experience`.`to` AS `experience.to`, `experience`.`teamLead` AS `experience.teamLead`, `experience`.`projectManager` AS `experience.projectManager`, `experience`.`reasonForJobChange` AS `experience.reasonForJobChange`, `experience`.`totalExperience` AS `experience.totalExperience`, `experience`.`candidateId` AS `experience.candidateId`, `experience`.`createdDate` AS `experience.createdDate`, `experience`.`updatedDate` AS `experience.updatedDate`, `experience`.`deletedDate` AS `experience.deletedDate`, `salary`.`id` AS `salary.id`, `salary`.`lastIncrementDate` AS `salary.lastIncrementDate`, `salary`.`currentCtc` AS `salary.currentCtc`, `salary`.`status` AS `salary.status`, `salary`.`salaryBeforeIncrement` AS `salary.salaryBeforeIncrement`, `salary`.`expectedCtc` AS `salary.expectedCtc`, `salary`.`addNoticePeriod` AS `salary.addNoticePeriod`, `salary`.`reasonForProfessionalGap` AS `salary.reasonForProfessionalGap`, `salary`.`candidateId` AS `salary.candidateId`, `salary`.`createdDate` AS `salary.createdDate`, `salary`.`updatedDate` AS `salary.updatedDate`, `salary`.`deletedDate` AS `salary.deletedDate`, `activity`.`id` AS `activity.id`, `activity`.`approachDate` AS `activity.approachDate`, `activity`.`approachBy` AS `activity.approachBy`, `activity`.`status` AS `activity.status`, `activity`.`note` AS `activity.note`, `activity`.`candidateId` AS `activity.candidateId`, `activity`.`createdDate` AS `activity.createdDate`, `activity`.`updatedDate` AS `activity.updatedDate`, `activity`.`deletedDate` AS `activity.deletedDate` FROM `Candidates` AS `Candidate` LEFT OUTER JOIN `CandidateEducation` AS `education` ON `Candidate`.`id` = `education`.`candidateId` AND (`education`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateCourses` AS `course` ON `Candidate`.`id` = `course`.`candidateId` AND (`course`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateExperiences` AS `experience` ON `Candidate`.`id` = `experience`.`candidateId` AND (`experience`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateSalaryDetails` AS `salary` ON `Candidate`.`id` = `salary`.`candidateId` AND (`salary`.`deletedDate` IS NULL) LEFT OUTER JOIN `CandidateActivities` AS `activity` ON `Candidate`.`id` = `activity`.`candidateId` AND (`activity`.`deletedDate` IS NULL) WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '103');
Executing (default): SELECT `id`, `firstName`, `middleName`, `lastName`, `dateOfBirth`, `gender`, `spouseName`, `maritalStatus`, `candidateImage`, `referedBy`, `wishlist`, `contactNumber`, `alternateContactNumber`, `email`, `skype`, `linkedIn`, `isActive`, `createdDate`, `updatedDate`, `deletedDate` FROM `Candidates` AS `Candidate` WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '1');
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES ('103','Parth','','Jadhav','1998-02-20 00:00:00','male','Priya Pal','Single','uploads/1627296489484-mishra.jpg','John Doe',true,'8257891123','5897411236','nav@gmail.com','navneetpal','navneetpal',true,'2021-07-26 10:48:09','2021-07-26 10:48:09') ON DUPLICATE KEY UPDATE `firstName`=VALUES(`firstName`),`middleName`=VALUES(`middleName`),`lastName`=VALUES(`lastName`),`dateOfBirth`=VALUES(`dateOfBirth`),`gender`=VALUES(`gender`),`spouseName`=VALUES(`spouseName`),`maritalStatus`=VALUES(`maritalStatus`),`candidateImage`=VALUES(`candidateImage`),`referedBy`=VALUES(`referedBy`),`wishlist`=VALUES(`wishlist`),`contactNumber`=VALUES(`contactNumber`),`alternateContactNumber`=VALUES(`alternateContactNumber`),`email`=VALUES(`email`),`skype`=VALUES(`skype`),`linkedIn`=VALUES(`linkedIn`),`isActive`=VALUES(`isActive`);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (47,'1','1','Lions English School, Silvassa','90.4',2017,'103','2021-07-26 10:48:09','2021-07-26 10:48:09'),(48,'2','1','Government Engineering College, Bharuch','80.65',2021,'103','2021-07-26 10:48:09','2021-07-26 10:48:09') ON DUPLICATE KEY UPDATE `educationTypeId`=VALUES(`educationTypeId`),`courseId`=VALUES(`courseId`),`instituteName`=VALUES(`instituteName`),`percentage`=VALUES(`percentage`),`passingYear`=VALUES(`passingYear`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'The web developer bootcamp','udemy','https://www.udemy.com/certicate/navneet','html,css,js,nodejs,mongodb','103','2021-07-26 10:48:09','2021-07-26 10:48:09') ON DUPLICATE KEY UPDATE `courseName`=VALUES(`courseName`),`instituteName`=VALUES(`instituteName`),`certificateUrl`=VALUES(`certificateUrl`),`skills`=VALUES(`skills`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (22,'surekha','intern','nodejs','2021-01-01 00:00:00','2021-10-12 00:00:00','pritee maheta','','',1,'103','2021-07-26 10:48:09','2021-07-26 10:48:09') ON DUPLICATE KEY UPDATE `companyName`=VALUES(`companyName`),`designation`=VALUES(`designation`),`technology`=VALUES(`technology`),`from`=VALUES(`from`),`to`=VALUES(`to`),`teamLead`=VALUES(`teamLead`),`reasonForJobChange`=VALUES(`reasonForJobChange`),`totalExperience`=VALUES(`totalExperience`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateSalaryDetails` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'2021-06-01 00:00:00',22000,'Non Negotiable',22000,26000,3,'','103','2021-07-26 10:48:09','2021-07-26 10:48:09') ON DUPLICATE KEY UPDATE `lastIncrementDate`=VALUES(`lastIncrementDate`),`currentCtc`=VALUES(`currentCtc`),`status`=VALUES(`status`),`salaryBeforeIncrement`=VALUES(`salaryBeforeIncrement`),`expectedCtc`=VALUES(`expectedCtc`),`addNoticePeriod`=VALUES(`addNoticePeriod`),`reasonForProfessionalGap`=VALUES(`reasonForProfessionalGap`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (2,'2021-01-20 00:00:00','jayshree hr','selected','','103','2021-07-26 10:48:09','2021-07-26 10:48:09') ON DUPLICATE KEY UPDATE `approachDate`=VALUES(`approachDate`),`approachBy`=VALUES(`approachBy`),`status`=VALUES(`status`),`note`=VALUES(`note`),`candidateId`=VALUES(`candidateId`);
Executing (default): SELECT `id`, `firstName`, `middleName`, `lastName`, `dateOfBirth`, `gender`, `spouseName`, `maritalStatus`, `candidateImage`, `referedBy`, `wishlist`, `contactNumber`, `alternateContactNumber`, `email`, `skype`, `linkedIn`, `isActive`, `createdDate`, `updatedDate`, `deletedDate` FROM `Candidates` AS `Candidate` WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '1');
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES ('103','Parth','','Jadhav','1998-02-20 00:00:00','male','Priya Pal','Single','uploads/1627296656496-mishra.jpg','John Doe',true,'8257891123','5897411236','nav@gmail.com','navneetpal','navneetpal',true,'2021-07-26 10:50:56','2021-07-26 10:50:56') ON DUPLICATE KEY UPDATE `firstName`=VALUES(`firstName`),`middleName`=VALUES(`middleName`),`lastName`=VALUES(`lastName`),`dateOfBirth`=VALUES(`dateOfBirth`),`gender`=VALUES(`gender`),`spouseName`=VALUES(`spouseName`),`maritalStatus`=VALUES(`maritalStatus`),`candidateImage`=VALUES(`candidateImage`),`referedBy`=VALUES(`referedBy`),`wishlist`=VALUES(`wishlist`),`contactNumber`=VALUES(`contactNumber`),`alternateContactNumber`=VALUES(`alternateContactNumber`),`email`=VALUES(`email`),`skype`=VALUES(`skype`),`linkedIn`=VALUES(`linkedIn`),`isActive`=VALUES(`isActive`);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (47,'1','1','Lions English School, Silvassa','90.4',2017,'103','2021-07-26 10:50:56','2021-07-26 10:50:56'),(48,'2','1','Government Engineering College, Bharuch','80.65',2021,'103','2021-07-26 10:50:56','2021-07-26 10:50:56') ON DUPLICATE KEY UPDATE `educationTypeId`=VALUES(`educationTypeId`),`courseId`=VALUES(`courseId`),`instituteName`=VALUES(`instituteName`),`percentage`=VALUES(`percentage`),`passingYear`=VALUES(`passingYear`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'The web developer bootcamp','udemy','https://www.udemy.com/certicate/navneet','html,css,js,nodejs,mongodb','103','2021-07-26 10:50:56','2021-07-26 10:50:56') ON DUPLICATE KEY UPDATE `courseName`=VALUES(`courseName`),`instituteName`=VALUES(`instituteName`),`certificateUrl`=VALUES(`certificateUrl`),`skills`=VALUES(`skills`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (22,'surekha','intern','nodejs','2021-01-01 00:00:00','2021-10-12 00:00:00','pritee maheta','','',1,'103','2021-07-26 10:50:56','2021-07-26 10:50:56') ON DUPLICATE KEY UPDATE `companyName`=VALUES(`companyName`),`designation`=VALUES(`designation`),`technology`=VALUES(`technology`),`from`=VALUES(`from`),`to`=VALUES(`to`),`teamLead`=VALUES(`teamLead`),`reasonForJobChange`=VALUES(`reasonForJobChange`),`totalExperience`=VALUES(`totalExperience`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateSalaryDetails` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'2021-06-01 00:00:00',22000,'Non Negotiable',22000,26000,3,'','103','2021-07-26 10:50:56','2021-07-26 10:50:56') ON DUPLICATE KEY UPDATE `lastIncrementDate`=VALUES(`lastIncrementDate`),`currentCtc`=VALUES(`currentCtc`),`status`=VALUES(`status`),`salaryBeforeIncrement`=VALUES(`salaryBeforeIncrement`),`expectedCtc`=VALUES(`expectedCtc`),`addNoticePeriod`=VALUES(`addNoticePeriod`),`reasonForProfessionalGap`=VALUES(`reasonForProfessionalGap`),`candidateId`=VALUES(`candidateId`);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (2,'2021-01-20 00:00:00','jayshree hr','selected','','103','2021-07-26 10:50:56','2021-07-26 10:50:56') ON DUPLICATE KEY UPDATE `approachDate`=VALUES(`approachDate`),`approachBy`=VALUES(`approachBy`),`status`=VALUES(`status`),`note`=VALUES(`note`),`candidateId`=VALUES(`candidateId`);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SELECT 1+1 AS result
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT `id`, `firstName`, `middleName`, `lastName`, `dateOfBirth`, `gender`, `spouseName`, `maritalStatus`, `candidateImage`, `referedBy`, `wishlist`, `contactNumber`, `alternateContactNumber`, `email`, `skype`, `linkedIn`, `isActive`, `createdDate`, `updatedDate`, `deletedDate` FROM `Candidates` AS `Candidate` WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '1');
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES ('103','Parth','','Jadhav','1998-02-20 00:00:00','male','Priya Pal','Single','uploads/1627297965702-mishra.jpg','John Doe',true,'8257891123','5897411236','nav@gmail.com','navneetpal','navneetpal',true,'2021-07-26 11:12:45','2021-07-26 11:12:45') ON DUPLICATE KEY UPDATE `firstName`=VALUES(`firstName`),`middleName`=VALUES(`middleName`),`lastName`=VALUES(`lastName`),`dateOfBirth`=VALUES(`dateOfBirth`),`gender`=VALUES(`gender`),`spouseName`=VALUES(`spouseName`),`maritalStatus`=VALUES(`maritalStatus`),`candidateImage`=VALUES(`candidateImage`),`referedBy`=VALUES(`referedBy`),`wishlist`=VALUES(`wishlist`),`contactNumber`=VALUES(`contactNumber`),`alternateContactNumber`=VALUES(`alternateContactNumber`),`email`=VALUES(`email`),`skype`=VALUES(`skype`),`linkedIn`=VALUES(`linkedIn`),`isActive`=VALUES(`isActive`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (47,'1','1','Lions English School, Silvassa','90.4',2017,'103','2021-07-26 11:12:45','2021-07-26 11:12:45'),(48,'2','1','Government Engineering College, Bharuch','80.65',2021,'103','2021-07-26 11:12:45','2021-07-26 11:12:45') ON DUPLICATE KEY UPDATE `educationTypeId`=VALUES(`educationTypeId`),`courseId`=VALUES(`courseId`),`instituteName`=VALUES(`instituteName`),`percentage`=VALUES(`percentage`),`passingYear`=VALUES(`passingYear`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'The web developer bootcamp','udemy','https://www.udemy.com/certicate/navneet','html,css,js,nodejs,mongodb','103','2021-07-26 11:12:45','2021-07-26 11:12:45') ON DUPLICATE KEY UPDATE `courseName`=VALUES(`courseName`),`instituteName`=VALUES(`instituteName`),`certificateUrl`=VALUES(`certificateUrl`),`skills`=VALUES(`skills`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (22,'surekha','intern','nodejs','2021-01-01 00:00:00','2021-10-12 00:00:00','pritee maheta','','',1,'103','2021-07-26 11:12:45','2021-07-26 11:12:45') ON DUPLICATE KEY UPDATE `companyName`=VALUES(`companyName`),`designation`=VALUES(`designation`),`technology`=VALUES(`technology`),`from`=VALUES(`from`),`to`=VALUES(`to`),`teamLead`=VALUES(`teamLead`),`reasonForJobChange`=VALUES(`reasonForJobChange`),`totalExperience`=VALUES(`totalExperience`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateSalaryDetails` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'2021-06-01 00:00:00',22000,'Non Negotiable',22000,26000,3,'','103','2021-07-26 11:12:45','2021-07-26 11:12:45') ON DUPLICATE KEY UPDATE `lastIncrementDate`=VALUES(`lastIncrementDate`),`currentCtc`=VALUES(`currentCtc`),`status`=VALUES(`status`),`salaryBeforeIncrement`=VALUES(`salaryBeforeIncrement`),`expectedCtc`=VALUES(`expectedCtc`),`addNoticePeriod`=VALUES(`addNoticePeriod`),`reasonForProfessionalGap`=VALUES(`reasonForProfessionalGap`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (2,'2021-01-20 00:00:00','jayshree hr','selected','','103','2021-07-26 11:12:45','2021-07-26 11:12:45') ON DUPLICATE KEY UPDATE `approachDate`=VALUES(`approachDate`),`approachBy`=VALUES(`approachBy`),`status`=VALUES(`status`),`note`=VALUES(`note`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): SELECT `id`, `firstName`, `middleName`, `lastName`, `dateOfBirth`, `gender`, `spouseName`, `maritalStatus`, `candidateImage`, `referedBy`, `wishlist`, `contactNumber`, `alternateContactNumber`, `email`, `skype`, `linkedIn`, `isActive`, `createdDate`, `updatedDate`, `deletedDate` FROM `Candidates` AS `Candidate` WHERE (`Candidate`.`deletedDate` IS NULL AND `Candidate`.`id` = '1');
Executing (default): INSERT INTO `Candidates` (`id`,`firstName`,`middleName`,`lastName`,`dateOfBirth`,`gender`,`spouseName`,`maritalStatus`,`candidateImage`,`referedBy`,`wishlist`,`contactNumber`,`alternateContactNumber`,`email`,`skype`,`linkedIn`,`isActive`,`createdDate`,`updatedDate`) VALUES ('103','Parth','','Jadhav','1998-02-20 00:00:00','male','Priya Pal','Single','uploads/1627298202027-mishra.jpg','John Doe',true,'8257891123','5897411236','nav@gmail.com','navneetpal','navneetpal',true,'2021-07-26 11:16:42','2021-07-26 11:16:42') ON DUPLICATE KEY UPDATE `firstName`=VALUES(`firstName`),`middleName`=VALUES(`middleName`),`lastName`=VALUES(`lastName`),`dateOfBirth`=VALUES(`dateOfBirth`),`gender`=VALUES(`gender`),`spouseName`=VALUES(`spouseName`),`maritalStatus`=VALUES(`maritalStatus`),`candidateImage`=VALUES(`candidateImage`),`referedBy`=VALUES(`referedBy`),`wishlist`=VALUES(`wishlist`),`contactNumber`=VALUES(`contactNumber`),`alternateContactNumber`=VALUES(`alternateContactNumber`),`email`=VALUES(`email`),`skype`=VALUES(`skype`),`linkedIn`=VALUES(`linkedIn`),`isActive`=VALUES(`isActive`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateEducation` (`id`,`educationTypeId`,`courseId`,`instituteName`,`percentage`,`passingYear`,`candidateId`,`createdDate`,`updatedDate`) VALUES (47,'1','1','Lions English School, Silvassa','90.4',2017,'103','2021-07-26 11:16:42','2021-07-26 11:16:42'),(48,'2','1','Government Engineering College, Bharuch','80.65',2021,'103','2021-07-26 11:16:42','2021-07-26 11:16:42') ON DUPLICATE KEY UPDATE `educationTypeId`=VALUES(`educationTypeId`),`courseId`=VALUES(`courseId`),`instituteName`=VALUES(`instituteName`),`percentage`=VALUES(`percentage`),`passingYear`=VALUES(`passingYear`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateCourses` (`id`,`courseName`,`instituteName`,`certificateUrl`,`skills`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'The web developer bootcamp','udemy','https://www.udemy.com/certicate/navneet','html,css,js,nodejs,mongodb','103','2021-07-26 11:16:42','2021-07-26 11:16:42') ON DUPLICATE KEY UPDATE `courseName`=VALUES(`courseName`),`instituteName`=VALUES(`instituteName`),`certificateUrl`=VALUES(`certificateUrl`),`skills`=VALUES(`skills`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateExperiences` (`id`,`companyName`,`designation`,`technology`,`from`,`to`,`teamLead`,`projectManager`,`reasonForJobChange`,`totalExperience`,`candidateId`,`createdDate`,`updatedDate`) VALUES (22,'surekha','intern','python','2021-01-01 00:00:00','2021-10-12 00:00:00','pritee maheta','','',1,'103','2021-07-26 11:16:42','2021-07-26 11:16:42') ON DUPLICATE KEY UPDATE `companyName`=VALUES(`companyName`),`designation`=VALUES(`designation`),`technology`=VALUES(`technology`),`from`=VALUES(`from`),`to`=VALUES(`to`),`teamLead`=VALUES(`teamLead`),`reasonForJobChange`=VALUES(`reasonForJobChange`),`totalExperience`=VALUES(`totalExperience`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateSalaryDetails` (`id`,`lastIncrementDate`,`currentCtc`,`status`,`salaryBeforeIncrement`,`expectedCtc`,`addNoticePeriod`,`reasonForProfessionalGap`,`candidateId`,`createdDate`,`updatedDate`) VALUES (21,'2021-06-01 00:00:00',22000,'Non Negotiable',22000,26000,3,'','103','2021-07-26 11:16:42','2021-07-26 11:16:42') ON DUPLICATE KEY UPDATE `lastIncrementDate`=VALUES(`lastIncrementDate`),`currentCtc`=VALUES(`currentCtc`),`status`=VALUES(`status`),`salaryBeforeIncrement`=VALUES(`salaryBeforeIncrement`),`expectedCtc`=VALUES(`expectedCtc`),`addNoticePeriod`=VALUES(`addNoticePeriod`),`reasonForProfessionalGap`=VALUES(`reasonForProfessionalGap`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): INSERT INTO `CandidateActivities` (`id`,`approachDate`,`approachBy`,`status`,`note`,`candidateId`,`createdDate`,`updatedDate`) VALUES (2,'2021-01-20 00:00:00','jayshree hr','selected','','103','2021-07-26 11:16:42','2021-07-26 11:16:42') ON DUPLICATE KEY UPDATE `approachDate`=VALUES(`approachDate`),`approachBy`=VALUES(`approachBy`),`status`=VALUES(`status`),`note`=VALUES(`note`),`candidateId`=VALUES(`candidateId`),`updatedDate`=VALUES(`updatedDate`);
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS `SequelizeMeta` (`name` VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_unicode_ci;
Executing (default): SHOW INDEX FROM `SequelizeMeta`
Executing (default): SELECT `name` FROM `SequelizeMeta` AS `SequelizeMeta` ORDER BY `SequelizeMeta`.`name` ASC;
